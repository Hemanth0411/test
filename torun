python workflow_manager.py "checklist.apk" "Explore the app." `
    --agent_model_choice "Gemini" `
    --agent_api_key "your_api_key" `

python -m scripts.self_explorer `
     --app_name "YouTube" `
     --package_name "com.google.android.youtube" `
     --description "Open the YouTube app, search for 'AI Agent Videos', press enter to initiate the search, and then tap on the first video result to play it."


python -m scripts.self_explorer `
    --app_name "Settings" `
    --package_name "com.android.settings" `
    --description "Explore the settings application to understand its features and navigation."

docker build -t navmind-agent .

docker run --rm -it \
    --device /dev/kvm \
    --volume $HOME/YOUR_APK_NAME.apk:/mnt/apks/mounted_app.apk:ro \
    --volume $HOME/agent_persistent_storage:/agent/apps \
    navmind-agent:latest \
    "/mnt/apks/mounted_app.apk" \
    "Create a Task to 'Buy Milk'" \
    "Gemini" \
    "AIzaSyAX5wUhomG8Ew7z5DWrHgauF-uqzTtIKoQ"


Breakdown of the docker run command parameters to customize for each run:

1.         --volume "C:\Users\lonel\Desktop\Study\AI Agent for android\NavMind_Agent\YOUR_APK_NAME.apk:/mnt/apks/mounted_app.apk:ro"
        YOUR_APK_NAME.apk: Change this to the actual filename of the APK you want to test for this specific run (e.g., checklist.apk, gallery.apk). This APK file must exist in your NavMind_Agent root directory (or you need to provide its full correct path).
        The part :/mnt/apks/mounted_app.apk:ro should generally remain the same. This is where the APK will appear inside the container.

2.         --volume "C:\Users\lonel\Desktop\Study\AI Agent for android\NavMind_Agent\agent_persistent_storage:/agent/apps"
        This line should remain the same for all runs, as it always maps your persistent storage on the host to where the agent expects to write its app-specific data (/agent/apps) inside the container.

3.         navmind-agent
        This is the name of your Docker image. It should remain the same unless you tagged your image differently.

4.         "/mnt/apks/mounted_app.apk"
        This is the first argument to your docker-entrypoint.sh (and then to workflow_manager.py). It's the path inside the container to the mounted APK. This should remain the same as it matches the destination in the first --volume directive.

5.         "Your task description for the app."
        Customize this for each run. This is the specific task you want the agent to perform on YOUR_APK_NAME.apk.

6.         "YourModelChoiceOrNone"
        Customize this if needed. Examples: "OpenAI", "Gemini", "Qwen". If your config.yaml (inside the image) already specifies the model and you don't want to override it, use "None".

7.         "YourApiKeyOrNone"
        Customize this if needed. Provide your API key here if you want to override what's in config.yaml or if the key is required for the chosen model. If the key is in config.yaml or not needed, use "None". Be careful about pasting API keys directly into shared terminal histories.




**Before you run this, make sure:**

1.  You have successfully built the `navmind-agent:latest` Docker image **directly on your DigitalOcean droplet** using the steps previously discussed (cloning your repo, then `docker build -t navmind-agent .`).
2.  You have **KVM set up and verified** (`kvm-ok` gives a positive result) on your droplet.
3.  You have an APK file on your droplet. Let's assume for this example its name is `your_app.apk` and you've placed it in your user's home directory (e.g., `/root/your_app.apk` if you are logged in as `root`, or `/home/yourusername/your_app.apk` if you are logged in as a regular user).
4.  You have created the persistent storage directory: `mkdir ~/agent_persistent_storage` (or the equivalent path like `/root/agent_persistent_storage`).


```bash
docker run --rm -it \
    --device /dev/kvm \
    --volume ~/YOUR_ACTUAL_APK_FILENAME.apk:/mnt/apks/mounted_app.apk:ro \
    --volume ~/agent_persistent_storage:/agent/apps \
    navmind-agent:latest \
    "/mnt/apks/mounted_app.apk" \
    "Create a Task to 'Buy Milk'" \
    "Gemini" \
    "AIzaSyAX5wUhomG8Ew7z5DWrHgauF-uqzTtIKoQ"
```

**Explanation of the parts you need to verify/replace:**

*   `--device /dev/kvm`: This is crucial for emulator performance on your Linux droplet.
*   `--volume ~/YOUR_ACTUAL_APK_FILENAME.apk:/mnt/apks/mounted_app.apk:ro`:
    *   **`~/YOUR_ACTUAL_APK_FILENAME.apk`**: **YOU MUST REPLACE THIS.**
        *   If you are logged in as `root` and your APK is named `checklist.apk` in the root user's home directory, this would be `/root/checklist.apk`.
        *   If you are logged in as a user named `ubuntu` and your APK is named `mycoolapp.apk` in that user's home directory, this would be `/home/ubuntu/mycoolapp.apk`.
        *   The `~` symbol is a shortcut for the current user's home directory.
    *   `:/mnt/apks/mounted_app.apk:ro`: This part (the path inside the container) should remain the same.
*   `--volume ~/agent_persistent_storage:/agent/apps`:
    *   This mounts the `agent_persistent_storage` directory from the current user's home directory on the droplet to `/agent/apps` inside the container. This should be correct if you followed the `mkdir ~/agent_persistent_storage` step.
*   `navmind-agent:latest`: This is the name of the Docker image you built on the droplet.
*   `"/mnt/apks/mounted_app.apk"`: The path to the APK *inside* the container. This should remain the same.
*   `"Create a Task to 'Buy Milk'"`: Your specific task description.
*   `"Gemini"`: Your chosen model.
*   `"AIzaSyAX5wUhomG8Ew7z5DWrHgauF-uqzTtIKoQ"`: Your provided Gemini API key.

**Example if you're logged in as `root` and your APK is `/root/checklist.apk`:**

```bash
docker run --rm -it \
    --device /dev/kvm \
    --volume /root/checklist.apk:/mnt/apks/mounted_app.apk:ro \
    --volume /root/agent_persistent_storage:/agent/apps \
    navmind-agent:latest \
    "/mnt/apks/mounted_app.apk" \
    "Create a Task to 'Buy Milk'" \
    "Gemini" \
    "AIzaSyAX5wUhomG8Ew7z5DWrHgauF-uqzTtIKoQ"
```

**Before running, please double-check the path to your APK file on the droplet and substitute it correctly.**